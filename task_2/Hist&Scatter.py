# -*- coding: utf-8 -*-
"""analyse_python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I_tRT3jCKkLpi0864IQ8-UpWd-aiE88N

# **HOUSING ANALYSIS**

Brieffing de la métadonnées

1. **prix**: Le prix de la maison en monnaie locale.
2. **superficie**: La superficie de la maison en pieds carrés.
3. **chambres**: Le nombre de chambres dans la maison.
4. **salles_de_bains**: Le nombre de salles de bains dans la maison.
5. **étages**: Le nombre d'étages (niveaux) de la maison.
6. **route_principale**: Si la maison est située sur une route principale (oui ou non).
7. **chambre_invité**: Si la maison dispose d'une chambre d'invité (oui ou non).
8. **sous_sol**: Si la maison a un sous-sol (oui ou non).
9. **chauffage_eau_chaude**: Si la maison dispose d'un chauffage à eau chaude (oui ou non).
10. **climatisation**: Si la maison est équipée de la climatisation (oui ou non).
11. **parking**: Le nombre de places de parking disponibles.
12. **zone_préférée**: Si la maison est située dans une zone préférée (oui ou non).
13. **état_meublé**: L'état de l'ameublement de la maison (meublée, semi-meublée, ou non-meublée).

## **COMPRÉHENSION DES DONNÉES**
"""

# Importation des bibliothèques
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# Lecture du datasets
df = pd.read_csv('Housing.csv')

# Lire les 5 premier lignes du datasets
df.head()

# Voir les types de chaque colonnes et le nombre de valeurs non nulles
df.info()

# Vérification des valeurs manquantes
df.isnull().sum()

# Vérification des valeurs en doublons
df.duplicated().sum()

# Statistiques descriptives des variables quantitatives
df.describe()

# Statistiques descriptives des variables qualitatives
df.describe(include='object')

# Sélectionner les colonnes quantitatives et après les colonnes qualitatives
df_num = df.select_dtypes(include=['int64', 'float64'])
df_cat = df.select_dtypes(include=['object'])

# Voir les colonnes quantitatives
df_num.head()

# Voir les colonnes qualitatives
df_cat.head()

# Analyser vérracité des variables quantitatives
df_num.head()

# Voir les valeurs uniques de chaque colonnes
df['price'].unique()

df['area'].unique()

df['bedrooms'].unique()

df['bathrooms'].unique()

df['bathrooms'].unique()

df['stories'].unique()

df['parking'].unique()

# Voir
df.columns

# Réajuster les sous dataframes df_num et df_cat
df_num = df[['price', 'area']]
df_cat = df[['bedrooms', 'bathrooms', 'stories', 'mainroad',
       'guestroom', 'basement', 'hotwaterheating', 'airconditioning',
       'parking', 'prefarea', 'furnishingstatus']]

df_num.head() # Numérique

df_cat.head() # Catégorique

"""## **ANALYSE UNIVARIÉES / BIVARIÉES ENTRE LES VARIABLES QUANTITATIVES**

### **UNIVARIÉES**
"""

# Variables quantitatives
df_num.head()

# Visulisation univariées
# Distribution de la colonne prix
plt.figure(figsize=(10, 6))
sns.histplot(df_num['price'], kde=True)
# Noms des axes
plt.xlabel('Prix')
plt.ylabel('Fréquence')
plt.title('Distribution du prix')

# Voir le boxplot
plt.figure(figsize=(10, 6))
sns.boxplot(df_num['price'])
# Noms des axes
plt.xlabel('Prix')
plt.title('Boxplot du prix')

# Distribution de la colonne prix
plt.figure(figsize=(10, 6))
sns.histplot(df_num['area'], kde=True)
# Noms des axes
plt.xlabel('Superficie')
plt.ylabel('Fréquence')
plt.title('Distribution de la superficie')

# Voir le boxplot
plt.figure(figsize=(10, 6))
sns.boxplot(df_num['area'])
# Noms des axes
plt.xlabel('Superficie')
plt.title('Boxplot de la superficie')

"""### **BIVARIÉES**"""

# Prix nuages des points
plt.figure(figsize=(10, 6))
sns.scatterplot(x='area', y='price', data=df_num)

"""## **ANALYSES UNIVARIÉES VARIABLES QUALITATIVES**"""

df_cat.head()

"""### **UNIVARIÉES**"""

# bedrooms
plt.figure(figsize=(10, 6))
sns.countplot(x='bedrooms', data=df_cat)
# Renommer les axes
plt.xlabel('Nombre de chambres')
plt.ylabel('Fréquence')
plt.title('Nombre de chambres')

# bathrooms
plt.figure(figsize=(10, 6))
sns.countplot(x='bathrooms', data=df_cat)
# Renommer les axes
plt.xlabel('Nombre de salles de bains')
plt.ylabel('Fréquence')
plt.title('Nombre de salles de bains')

# Stories
plt.figure(figsize=(10, 6))
sns.countplot(x='stories', data=df_cat)
# Renommer les axes
plt.xlabel('Nombre d\'étages')
plt.ylabel('Fréquence')
plt.title('Nombre d\'étages')

# mainroad
plt.figure(figsize=(10, 6))
sns.countplot(x='mainroad', data=df_cat)
# Renommer les axes
plt.xlabel('Route principale')
plt.ylabel('Fréquence')
plt.title('Route principale')

df_cat.columns

# guestroom
plt.figure(figsize=(10, 6))
sns.countplot(x='guestroom', data=df_cat)
# Renommer les axes
plt.xlabel('Chambre d\'invité')
plt.ylabel('Fréquence')
plt.title('Chambre d\'invité')

# basement
plt.figure(figsize=(10, 6))
sns.countplot(x='basement', data=df_cat)
# Renommer les axes
plt.xlabel('Sous-sol')
plt.ylabel('Fréquence')
plt.title('Sous-sol')

# hotwaterheating
plt.figure(figsize=(10, 6))
sns.countplot(x='hotwaterheating', data=df_cat)
# Renommer les axes
plt.xlabel('Chauffage à eau chaude')
plt.ylabel('Fréquence')
plt.title('Chauffage à eau chaude')

# airconditioning
plt.figure(figsize=(10, 6))
sns.countplot(x='airconditioning', data=df_cat)
# Renommer les axes
plt.xlabel('Climatisation')
plt.ylabel('Fréquence')
plt.title('Climatisation')

# parking	en utilisant un diagramme circuclaire
plt.figure(figsize=(10, 6))
plt.pie(df_cat['parking'].value_counts(), labels=df_cat['parking'].unique(), autopct='%1.1f%%')
plt.title('Parking')
plt.show()

#prefarea
plt.figure(figsize=(10, 6))
sns.countplot(x='prefarea', data=df_cat)
# Renommer les axes
plt.xlabel('Zone préférée')
plt.ylabel('Fréquence')
plt.title('Zone préférée')

# furnishingstatus
plt.figure(figsize=(10, 6))
sns.countplot(x='furnishingstatus', data=df_cat)
# Renommer les axes
plt.xlabel('État de l\'ameublement')
plt.ylabel('Fréquence')
plt.title('État de l\'ameublement')

df.columns

"""## **ANALYSES ENTRE VARIABLES QUALITATIVES ET VARIABLES QUANTITATIVES**"""

# price vs dedrooms
plt.figure(figsize=(10, 6))
sns.boxplot(x='bedrooms', y='price', data=df)
# Renommer les axes
plt.xlabel('Nombre de chambres')
plt.ylabel('Prix')
plt.title('Prix en fonction du nombre de chambres')

# area vs bathrooms
plt.figure(figsize=(10, 6))
sns.boxplot(x='bathrooms', y='area', data=df)
# Renommer les axes
plt.xlabel('Nombre de salles de bains')
plt.ylabel('Superficie')
plt.title('Superficie en fonction du nombre de salles de bains')

"""## **TRANSFORMATION DES DONNÉES**"""

# Transformer les données qualitatives en quantitatives numériques pour ceux qui ne le sont pas
df_cat.head()

# Colonnes à transformer en numériques
# mainroad
# gestroom
# basement
# hotwaterheating
# airconditioning
# prefarea
# furnishingstatus

# Mapping des valeurs 'yes' et 'no' en 1 et 0
mapping = {'yes': 1, 'no': 0}

df['mainroad'] = df['mainroad'].map(mapping)
df['guestroom'] = df['guestroom'].map(mapping)
df['basement'] = df['basement'].map(mapping)
df['hotwaterheating'] = df['hotwaterheating'].map(mapping)
df['prefarea'] = df['prefarea'].map(mapping)
df['airconditioning'] = df['airconditioning'].map(mapping)

mapping1 = {'furnished': 1, 'semi-furnished': 2, 'unfurnished': 3}
df['furnishingstatus'] = df['furnishingstatus'].map(mapping1)

# Voir le datasets
df.head()

"""# **RAPPORT**

## **1. COMPRÉHENSION DES DONNÉES**

### **1.1. Vérification des valeurs manquantes**

Aucune valeur manquante n'a été détectée dans le dataset.

### **1.2. Traitement des doublons**

Aucun doublon n'a été trouvé, ce qui confirme que chaque entrée dans le dataset est unique.

### **1.3. Détection des valeurs aberrantes**

Des valeurs aberrantes ont été détectées dans les colonnes `prix`, `superficie`, `chambres`, `salles_de_bains`, `étages`, et `parking`. Ces valeurs peuvent être clairement  identifiées en utilisant la méthode des quartiles (IQR) et doivent être analysées avec soin pour comprendre leur impact potentiel sur les modèles prédictifs.

## **2. Analyse exploratoire des données (EDA)**

### **2.1. Analyse univariée**

#### **2.1.1. Distribution des variables numériques**

- **prix**: La distribution des prix montre une forte asymétrie à droite, avec quelques maisons très chères qui tirent la moyenne vers le haut.
- **superficie**: La plupart des maisons ont une superficie comprise entre 7000 et 10000 pieds carrés, avec une distribution légèrement asymétrique à droite.
- **chambres**: La distribution du nombre de chambres est relativement symétrique, avec une majorité de maisons ayant 3 ou 4 chambres.
- **salles_de_bains**: La majorité des maisons ont 1 ou 2 salles de bains, avec une distribution asymétrique à droite.
- **étages**: La plupart des maisons ont 2 ou 3 étages, avec quelques maisons ayant jusqu'à 4 étages.
- **parking**: La distribution du nombre de places de parking est asymétrique à droite, avec la plupart des maisons ayant 2 ou 3 places de parking.

#### **2.1.2. Distribution des variables catégorielles**

- **route_principale**: Une grande majorité des maisons sont situées sur des routes principales.
- **chambre_invité**: La plupart des maisons ne disposent pas de chambre d'invité.
- **sous_sol**: Une proportion importante des maisons n'a pas de sous-sol.
- **chauffage_eau_chaude**: La plupart des maisons ne disposent pas de chauffage à eau chaude.
- **climatisation**: Une majorité des maisons sont équipées de climatisation.
- **zone_préférée**: Un nombre significatif de maisons sont situées dans des zones préférées.

### **2.2. Analyse bivariée**

#### **2.2.1. Prix vs Superficie**

Il y a une corrélation positive entre la superficie et le prix des maisons, indiquant que les maisons plus grandes tendent à être plus chères.

#### **2.2.2. Prix vs Nombre de chambres**

La relation entre le nombre de chambres et le prix montre également une corrélation positive, bien que moins marquée que pour la superficie.

#### **2.2.3. Prix vs Nombre de salles de bains**

Le prix des maisons tend à augmenter avec le nombre de salles de bains, bien que cette relation soit moins linéaire que pour les autres variables.

### **3.  Transformation des colonnes catégorielles en numériques**

Les colonnes `route_principale`, `chambre_invité`, `sous_sol`, `chauffage_eau_chaude`, `climatisation`, et `zone_préférée` ont été transformées en valeurs numériques.

## **3. Conclusion**

L'analyse des données du Boston Housing révèle des tendances claires dans les relations entre le prix des maisons et diverses caractéristiques telles que la superficie, le nombre de chambres et de salles de bains, ainsi que la présence de commodités comme la climatisation. On a pu mieux comprendre les facteurs qui influencent le marché immobilier dans la région étudiée. Les valeurs aberrantes identifiées doivent être étudiées plus en détail pour évaluer leur impact sur les modèles prédictifs futurs.


"""